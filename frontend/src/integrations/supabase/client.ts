// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types.ts';
import { createMockSupabaseClient } from './mockClient';

const BACKEND_URL = import.meta.env.VITE_BACKEND_URL;
const SUPABASE_PROXY_KEY = import.meta.env.VITE_SUPABASE_PROXY_KEY ?? 'frontend-proxy';
const SUPABASE_PROJECT_ID = import.meta.env.VITE_SUPABASE_PROJECT_ID;

const shouldUseMock = !BACKEND_URL || BACKEND_URL === 'mock';

const SUPABASE_URL = shouldUseMock
  ? null
  : `${BACKEND_URL.replace(/\/$/, '')}/api/supabase`;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = shouldUseMock
  ? createMockSupabaseClient()
  : createClient<Database>(SUPABASE_URL!, SUPABASE_PROXY_KEY, {
      auth: {
        storage: localStorage,
        persistSession: true,
        autoRefreshToken: true,
      }
    });

// Dev-time check: verify project ref in URL matches expected
(() => {
  if (shouldUseMock) {
    console.warn('[Supabase Proxy] Falling back to mock Supabase client. Configure VITE_BACKEND_URL to use real backend.');
    return;
  }

  try {
    const expectedRef = SUPABASE_PROJECT_ID;
    if (!expectedRef || !BACKEND_URL) {
      return;
    }
    const backendHost = new URL(BACKEND_URL).host;
    if (!backendHost) {
      return;
    }
    if (!backendHost.includes(expectedRef)) {
      console.warn('[Supabase Proxy] Backend host', backendHost, 'does not contain expected project id', expectedRef);
    }
  } catch { }
})();