@startuml Story Statistics Module Architecture

!define PRESENTATION_COLOR #E3F2FD
!define DAO_COLOR #FFF3E0
!define ENTITY_COLOR #F3E5F5

title Story Statistics Module - 3-Layer Architecture

' ============================================
' PRESENTATION LAYER (UI Components)
' ============================================
package "Presentation Layer (React TSX)" PRESENTATION_COLOR {
  
  class StoryStats <<React Component>> {
    - stories: any[]
    - loading: boolean
    - searchTerm: string
    - searching: boolean
    --
    + useEffect(): void
    + fetchStories(): Promise<void>
    + handleSearch(): Promise<void>
    + handleViewDetail(storyId: string): void
    + formatDate(dateString: string): string
    + getStatusBadge(status: string): Badge
    --
    Hiển thị danh sách truyện
    Sắp xếp theo lượt xem
    Tìm kiếm truyện
    Click để xem chi tiết
  }
  
  class StoryStatsDetail <<React Component>> {
    - stats: StoryDetailStatistics
    - comments: any[]
    - listens: any[]
    - loading: boolean
    --
    + useEffect(): void
    + fetchStoryStats(storyId: string): Promise<void>
    + formatDate(dateString: string): string
    + formatSeconds(seconds: number): string
    + getStatusBadge(status: string): Badge
    --
    Hiển thị thống kê chi tiết
    Tabs: Lịch sử xem, Top người đọc,
          Biểu đồ theo ngày, Lịch sử nghe
    Charts và visualizations
  }
  
  note right of StoryStats
    **Chức năng:**
    - Hiển thị danh sách truyện
    - Sắp xếp theo view count
    - Search functionality
    - Navigate to detail page
  end note
  
  note right of StoryStatsDetail
    **Chức năng:**
    - Hiển thị full statistics
    - 4 tabs: Views, Readers, Chart, Listens
    - Real-time data visualization
    - Back navigation
  end note
}

' ============================================
' DATA ACCESS LAYER (DAO)
' ============================================
package "Data Access Layer (DAO)" DAO_COLOR {
  
  class StoryStatsDAO <<static>> {
    {static} + getStoriesWithStats(limit: number): Promise
    {static} + getTopStoriesByViews(limit: number): Promise
    {static} + getStoryDetailStats(storyId: string): Promise
    {static} + getStoryComments(storyId: string, limit: number): Promise
    {static} + getStoryListenHistory(storyId: string, limit: number): Promise
    {static} + searchStoriesByTitle(searchTerm: string, limit: number): Promise
    --
    Truy cập Supabase Database
    Query admin_story_details view
    Aggregate data from multiple tables
  }
  
  note right of StoryStatsDAO
    **Database Operations:**
    - Query stories với stats
    - Join với profiles, tags
    - Aggregate views, likes, comments
    - Group by date cho charts
    - Sort by view_count
  end note
}

' ============================================
' ENTITY LAYER (Domain Models)
' ============================================
package "Entity Layer (Domain Models)" ENTITY_COLOR {
  
  class Story <<Entity>> {
    + id: string
    + title: string
    + description: string | null
    + content: string
    + author_id: string
    + cover_image_url: string | null
    + view_count: number
    + created_at: string
    + updated_at: string
    + status: 'draft' | 'published' | 'rejected'
    + is_public: boolean
    + audio_url: string | null
    + audio_status: string | null
    --
    Đại diện cho một truyện
  }
  
  class Author <<Entity>> {
    + id: string
    + email: string
    + full_name: string | null
    + avatar_url: string | null
    --
    Thông tin tác giả
  }
  
  class Tag <<Entity>> {
    + id: string
    + name: string
    + slug: string
    --
    Thẻ phân loại
  }
  
  class StoryStats <<Entity>> {
    + story_id: string
    + view_count: number
    + views_count: number
    + likes_count: number
    + comments_count: number
    + listens_count: number
    + bookmarks_count: number
    --
    Thống kê cơ bản
  }
  
  class StoryDetailStatistics <<Entity>> {
    + story: Story
    + author: Author
    + stats: StatsObject
    + tags: Tag[]
    + recent_views: StoryView[]
    + top_readers: ReaderActivity[]
    + views_by_date: ViewsByDate[]
    --
    Thống kê chi tiết đầy đủ
  }
  
  class StoryView <<Entity>> {
    + id: string
    + user_id: string | null
    + story_id: string
    + created_at: string
    + user_name: string
    --
    Lượt xem truyện
  }
  
  class ReaderActivity <<Entity>> {
    + user_id: string
    + user_name: string | null
    + user_email: string
    + total_views: number
    + total_reading_time: number
    + last_accessed: string
    --
    Hoạt động người đọc
  }
  
  class ViewsByDate <<Entity>> {
    + date: string
    + views_count: number
    --
    Thống kê theo ngày
  }
  
  class Comment <<Entity>> {
    + id: string
    + story_id: string
    + user_id: string
    + content: string
    + created_at: string
    + user_name: string | null
    --
    Bình luận truyện
  }
  
  class ListenHistory <<Entity>> {
    + id: string
    + user_id: string | null
    + story_id: string
    + listened_seconds: number
    + created_at: string
    + user_name: string
    --
    Lịch sử nghe
  }
}

' ============================================
' DATABASE LAYER
' ============================================
database "Supabase PostgreSQL" {
  collections "Tables" {
    [stories]
    [story_views]
    [story_likes]
    [story_comments]
    [story_listens]
    [user_bookmarks]
    [reading_history]
    [profiles]
    [tags]
    [story_tags]
  }
  
  collections "Views" {
    [admin_story_details]
    [admin_dashboard_stats]
  }
}

' ============================================
' RELATIONSHIPS
' ============================================

' Presentation -> DAO
StoryStats ..> StoryStatsDAO : uses
StoryStatsDetail ..> StoryStatsDAO : uses

' DAO -> Entity
StoryStatsDAO ..> Story : returns
StoryStatsDAO ..> StoryDetailStatistics : returns
StoryStatsDAO ..> Comment : returns
StoryStatsDAO ..> ListenHistory : returns

' Entity Compositions
StoryDetailStatistics *-- Story : contains
StoryDetailStatistics *-- Author : contains
StoryDetailStatistics *-- Tag : contains
StoryDetailStatistics *-- StoryView : contains
StoryDetailStatistics *-- ReaderActivity : contains
StoryDetailStatistics *-- ViewsByDate : contains

' DAO -> Database
StoryStatsDAO --> [admin_story_details] : queries
StoryStatsDAO --> [stories] : queries
StoryStatsDAO --> [story_views] : queries
StoryStatsDAO --> [story_comments] : queries
StoryStatsDAO --> [story_listens] : queries
StoryStatsDAO --> [reading_history] : queries
StoryStatsDAO --> [story_tags] : queries
StoryStatsDAO --> [tags] : queries
StoryStatsDAO --> [profiles] : queries

' ============================================
' NOTES AND LEGENDS
' ============================================

legend right
  |= Layer |= Mô tả |
  | <back:PRESENTATION_COLOR>Presentation</back> | React TSX Components - UI Layer |
  | <back:DAO_COLOR>DAO</back> | Data Access Objects - Business Logic |
  | <back:ENTITY_COLOR>Entity</back> | Domain Models - Data Structures |
  
  **Module Flow:**
  1. User tương tác với UI (Presentation)
  2. UI gọi DAO methods để fetch data
  3. DAO truy vấn Supabase database
  4. DAO map data sang Entity objects
  5. Entity objects trả về cho UI
  6. UI render data cho user
endlegend

note bottom
  **Module Thống kê Truyện - Story Statistics**
  
  **Các tính năng chính:**
  • Xem danh sách truyện theo lượt xem
  • Tìm kiếm truyện theo tên
  • Click vào truyện để xem thống kê chi tiết
  • Hiển thị lịch sử xem, top người đọc
  • Biểu đồ thống kê theo ngày
  • Lịch sử nghe audio
  
  **Technology Stack:**
  • React + TypeScript
  • Supabase (PostgreSQL)
  • React Router (Navigation)
  • shadcn/ui (UI Components)
  • Lucide Icons
end note

@enduml
